
nucleo-f767zi-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003378  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003590  08003590  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  2000000c  080035a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080035a4  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcb5  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca9  00000000  00000000  0002bcef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002d998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002697c  00000000  00000000  0002ee50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000919c  00000000  00000000  000557cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eec9b  00000000  00000000  0005e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  0014d680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003558 	.word	0x08003558

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003558 	.word	0x08003558

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fb1f 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f812 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f904 	bl	8000750 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f8a4 	bl	8000694 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 f8d2 	bl	80006f4 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000550:	2101      	movs	r1, #1
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x2c>)
 8000554:	f000 fe3b 	bl	80011ce <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055c:	f000 fb6c 	bl	8000c38 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000560:	e7f6      	b.n	8000550 <main+0x18>
 8000562:	bf00      	nop
 8000564:	40020400 	.word	0x40020400

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0b8      	sub	sp, #224	; 0xe0
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 ffe6 	bl	8003548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2290      	movs	r2, #144	; 0x90
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f002 ffd7 	bl	8003548 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800059a:	f000 ff7b 	bl	8001494 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <SystemClock_Config+0x120>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	4a39      	ldr	r2, [pc, #228]	; (8000688 <SystemClock_Config+0x120>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <SystemClock_Config+0x120>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <SystemClock_Config+0x124>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005be:	4a33      	ldr	r2, [pc, #204]	; (800068c <SystemClock_Config+0x124>)
 80005c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <SystemClock_Config+0x124>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ffa2 	bl	8001554 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000616:	f000 f981 	bl	800091c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800061a:	f000 ff4b 	bl	80014b4 <HAL_PWREx_EnableOverDrive>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 f97a 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800064c:	2103      	movs	r1, #3
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fa2e 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800065a:	f000 f95f 	bl	800091c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <SystemClock_Config+0x128>)
 8000660:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fc15 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800067c:	f000 f94e 	bl	800091c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	37e0      	adds	r7, #224	; 0xe0
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000
 8000690:	00200100 	.word	0x00200100

08000694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART3_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART3_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART3_UART_Init+0x58>)
 80006d8:	f002 f808 	bl	80026ec <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f91b 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40004800 	.word	0x40004800

080006f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000702:	2206      	movs	r2, #6
 8000704:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000708:	2202      	movs	r2, #2
 800070a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000714:	2202      	movs	r2, #2
 8000716:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072c:	2201      	movs	r2, #1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	f000 fd63 	bl	8001202 <HAL_PCD_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f8eb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000a8 	.word	0x200000a8

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b67      	ldr	r3, [pc, #412]	; (8000904 <MX_GPIO_Init+0x1b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a66      	ldr	r2, [pc, #408]	; (8000904 <MX_GPIO_Init+0x1b4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b64      	ldr	r3, [pc, #400]	; (8000904 <MX_GPIO_Init+0x1b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	4b61      	ldr	r3, [pc, #388]	; (8000904 <MX_GPIO_Init+0x1b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a60      	ldr	r2, [pc, #384]	; (8000904 <MX_GPIO_Init+0x1b4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b5e      	ldr	r3, [pc, #376]	; (8000904 <MX_GPIO_Init+0x1b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b5b      	ldr	r3, [pc, #364]	; (8000904 <MX_GPIO_Init+0x1b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a5a      	ldr	r2, [pc, #360]	; (8000904 <MX_GPIO_Init+0x1b4>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b58      	ldr	r3, [pc, #352]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b55      	ldr	r3, [pc, #340]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a54      	ldr	r2, [pc, #336]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b52      	ldr	r3, [pc, #328]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a4e      	ldr	r2, [pc, #312]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a48      	ldr	r2, [pc, #288]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <MX_GPIO_Init+0x1b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007fc:	4842      	ldr	r0, [pc, #264]	; (8000908 <MX_GPIO_Init+0x1b8>)
 80007fe:	f000 fccd 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4841      	ldr	r0, [pc, #260]	; (800090c <MX_GPIO_Init+0x1bc>)
 8000808:	f000 fcc8 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <MX_GPIO_Init+0x1c0>)
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	483c      	ldr	r0, [pc, #240]	; (8000914 <MX_GPIO_Init+0x1c4>)
 8000822:	f000 fb11 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000826:	2332      	movs	r3, #50	; 0x32
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000836:	230b      	movs	r3, #11
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4834      	ldr	r0, [pc, #208]	; (8000914 <MX_GPIO_Init+0x1c4>)
 8000842:	f000 fb01 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000846:	2386      	movs	r3, #134	; 0x86
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000856:	230b      	movs	r3, #11
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x1c8>)
 8000862:	f000 faf1 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000866:	f244 0381 	movw	r3, #16513	; 0x4081
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4822      	ldr	r0, [pc, #136]	; (8000908 <MX_GPIO_Init+0x1b8>)
 8000880:	f000 fae2 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000896:	230b      	movs	r3, #11
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <MX_GPIO_Init+0x1b8>)
 80008a2:	f000 fad1 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_GPIO_Init+0x1bc>)
 80008be:	f000 fac3 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_GPIO_Init+0x1bc>)
 80008d6:	f000 fab7 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80008da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ec:	230b      	movs	r3, #11
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_GPIO_Init+0x1bc>)
 80008f8:	f000 faa6 	bl	8000e48 <HAL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	10110000 	.word	0x10110000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020000 	.word	0x40020000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000922:	e7fe      	b.n	8000922 <Error_Handler+0x6>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0x7c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d128      	bne.n	80009e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x80>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <HAL_UART_MspInit+0x80>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0x80>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d0:	2307      	movs	r3, #7
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x84>)
 80009dc:	f000 fa34 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40004800 	.word	0x40004800
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a14:	d141      	bne.n	8000a9a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a40:	230a      	movs	r3, #10
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <HAL_PCD_MspInit+0xb4>)
 8000a4c:	f000 f9fc 	bl	8000e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <HAL_PCD_MspInit+0xb4>)
 8000a66:	f000 f9ef 	bl	8000e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6e:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6353      	str	r3, [r2, #52]	; 0x34
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_PCD_MspInit+0xb0>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f87e 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x28>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x28>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x28>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
  ldr  r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd3 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 fcd1 	bl	8003500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fceb 	bl	8000538 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000b68:	08003598 	.word	0x08003598
  ldr  r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b70:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b78:	200004b0 	.word	0x200004b0

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>

08000b7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f92c 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f805 	bl	8000b98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b8e:	f7ff fec9 	bl	8000924 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f939 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 f90f 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200004ac 	.word	0x200004ac

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200004ac 	.word	0x200004ac

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_Delay+0x40>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <__NVIC_SetPriorityGrouping+0x40>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x40>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	05fa0000 	.word	0x05fa0000

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff47 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e175      	b.n	8001154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8164 	bne.w	800114e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9a:	2b11      	cmp	r3, #17
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b12      	cmp	r3, #18
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x100>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80be 	beq.w	800114e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a64      	ldr	r2, [pc, #400]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fea:	4a60      	ldr	r2, [pc, #384]	; (800116c <HAL_GPIO_Init+0x324>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d031      	beq.n	8001082 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d02b      	beq.n	800107e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <HAL_GPIO_Init+0x334>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x22a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x226>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x222>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x21e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x21a>
 800105e:	2309      	movs	r3, #9
 8001060:	e012      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001062:	230a      	movs	r3, #10
 8001064:	e010      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001066:	2308      	movs	r3, #8
 8001068:	e00e      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106a:	2307      	movs	r3, #7
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106e:	2306      	movs	r3, #6
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001098:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_GPIO_Init+0x324>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_GPIO_Init+0x350>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae86 	bls.w	8000e68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40022400 	.word	0x40022400
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001204:	b08f      	sub	sp, #60	; 0x3c
 8001206:	af0a      	add	r7, sp, #40	; 0x28
 8001208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e116      	b.n	8001442 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fbe0 	bl	80009f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fefc 	bl	8003050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	687e      	ldr	r6, [r7, #4]
 8001260:	466d      	mov	r5, sp
 8001262:	f106 0410 	add.w	r4, r6, #16
 8001266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001272:	e885 0003 	stmia.w	r5, {r0, r1}
 8001276:	1d33      	adds	r3, r6, #4
 8001278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f001 fe90 	bl	8002fa0 <USB_CoreInit>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0d7      	b.n	8001442 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f001 feea 	bl	8003072 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e04a      	b.n	800133a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	333d      	adds	r3, #61	; 0x3d
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	333c      	adds	r3, #60	; 0x3c
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	b298      	uxth	r0, r3
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3342      	adds	r3, #66	; 0x42
 80012e0:	4602      	mov	r2, r0
 80012e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	333f      	adds	r3, #63	; 0x3f
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3344      	adds	r3, #68	; 0x44
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3348      	adds	r3, #72	; 0x48
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3af      	bcc.n	80012a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e044      	b.n	80013d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3b5      	bcc.n	800134a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	687e      	ldr	r6, [r7, #4]
 80013e6:	466d      	mov	r5, sp
 80013e8:	f106 0410 	add.w	r4, r6, #16
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013fc:	1d33      	adds	r3, r6, #4
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f001 fe61 	bl	80030c8 <USB_DevInit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e014      	b.n	8001442 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f80b 	bl	800144c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f002 f813 	bl	8003466 <USB_DevDisconnect>

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800144c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_PCDEx_ActivateLPM+0x44>)
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	10000003 	.word	0x10000003

08001494 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e2:	f7ff fb9d 	bl	8000c20 <HAL_GetTick>
 80014e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e8:	e009      	b.n	80014fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ea:	f7ff fb99 	bl	8000c20 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f8:	d901      	bls.n	80014fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e022      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d1ee      	bne.n	80014ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fb82 	bl	8000c20 <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fb7e 	bl	8000c20 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e29b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00c      	beq.n	800159e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001584:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_OscConfig+0x62>
 8001590:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <HAL_RCC_OscConfig+0x130>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d168      	bne.n	8001684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e275      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x7a>
 80015c0:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x9c>
 80015d6:	4b7f      	ldr	r3, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7e      	ldr	r2, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7b      	ldr	r2, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0xc0>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xd8>
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6b      	ldr	r2, [pc, #428]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff faf4 	bl	8000c20 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff faf0 	bl	8000c20 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e229      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xe8>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fae0 	bl	8000c20 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fadc 	bl	8000c20 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e215      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x110>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d069      	beq.n	8001766 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x190>
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x17a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1e9      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	493d      	ldr	r1, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e040      	b.n	8001766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa92 	bl	8000c20 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fa8e 	bl	8000c20 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1c7      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4929      	ldr	r1, [pc, #164]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
 8001732:	e018      	b.n	8001766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fa6e 	bl	8000c20 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fa6a 	bl	8000c20 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1a3      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d038      	beq.n	80017e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d019      	beq.n	80017ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa4b 	bl	8000c20 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fa47 	bl	8000c20 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e180      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x23a>
 80017ac:	e01a      	b.n	80017e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa31 	bl	8000c20 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fa2d 	bl	8000c20 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d903      	bls.n	80017d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e166      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
 80017d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a4 	beq.w	800193a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b8c      	ldr	r3, [pc, #560]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a88      	ldr	r2, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b86      	ldr	r3, [pc, #536]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <HAL_RCC_OscConfig+0x4d4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001826:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x4d4>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f9f5 	bl	8000c20 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff f9f1 	bl	8000c20 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e12a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x4d4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x31a>
 8001860:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a6f      	ldr	r2, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e02d      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x33c>
 8001876:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a67      	ldr	r2, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	e01c      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x35e>
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a61      	ldr	r2, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a5b      	ldr	r2, [pc, #364]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
 80018be:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff f9a5 	bl	8000c20 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff f9a1 	bl	8000c20 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0d8      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ee      	beq.n	80018da <HAL_RCC_OscConfig+0x386>
 80018fc:	e014      	b.n	8001928 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff f98f 	bl	8000c20 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff f98b 	bl	8000c20 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0c2      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ee      	bne.n	8001906 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d105      	bne.n	800193a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80ae 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d06d      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d14b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 800195e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f95c 	bl	8000c20 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f958 	bl	8000c20 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e091      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	071b      	lsls	r3, r3, #28
 80019b6:	491b      	ldr	r1, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f92a 	bl	8000c20 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f926 	bl	8000c20 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e05f      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x47c>
 80019ee:	e057      	b.n	8001aa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 80019f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f910 	bl	8000c20 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f90c 	bl	8000c20 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e045      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4b0>
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x54c>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x558>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d129      	bne.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d122      	bne.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d119      	bne.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d10f      	bne.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0d0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d040      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e073      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4936      	ldr	r1, [pc, #216]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba4:	f7ff f83c 	bl	8000c20 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff f838 	bl	8000c20 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e053      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d210      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 020f 	bic.w	r2, r3, #15
 8001bea:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4601      	mov	r1, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1cc>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	fa21 f303 	lsr.w	r3, r1, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1d0>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1d4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe ff98 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08003570 	.word	0x08003570
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d007      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x32>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d008      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x38>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80b4 	bne.w	8001e1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cb6:	60bb      	str	r3, [r7, #8]
      break;
 8001cb8:	e0b3      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cba:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cbc:	60bb      	str	r3, [r7, #8]
      break;
 8001cbe:	e0b0      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04a      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd6:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	f04f 0400 	mov.w	r4, #0
 8001ce0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	ea03 0501 	and.w	r5, r3, r1
 8001cec:	ea04 0602 	and.w	r6, r4, r2
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f04f 0400 	mov.w	r4, #0
 8001cfc:	0154      	lsls	r4, r2, #5
 8001cfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d02:	014b      	lsls	r3, r1, #5
 8001d04:	4619      	mov	r1, r3
 8001d06:	4622      	mov	r2, r4
 8001d08:	1b49      	subs	r1, r1, r5
 8001d0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	f04f 0400 	mov.w	r4, #0
 8001d16:	0194      	lsls	r4, r2, #6
 8001d18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d1c:	018b      	lsls	r3, r1, #6
 8001d1e:	1a5b      	subs	r3, r3, r1
 8001d20:	eb64 0402 	sbc.w	r4, r4, r2
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	00e2      	lsls	r2, r4, #3
 8001d2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d32:	00d9      	lsls	r1, r3, #3
 8001d34:	460b      	mov	r3, r1
 8001d36:	4614      	mov	r4, r2
 8001d38:	195b      	adds	r3, r3, r5
 8001d3a:	eb44 0406 	adc.w	r4, r4, r6
 8001d3e:	f04f 0100 	mov.w	r1, #0
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	0262      	lsls	r2, r4, #9
 8001d48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d4c:	0259      	lsls	r1, r3, #9
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	4621      	mov	r1, r4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f04f 0400 	mov.w	r4, #0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	f7fe fa6a 	bl	8000238 <__aeabi_uldivmod>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e049      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	f04f 0400 	mov.w	r4, #0
 8001d76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	ea03 0501 	and.w	r5, r3, r1
 8001d82:	ea04 0602 	and.w	r6, r4, r2
 8001d86:	4629      	mov	r1, r5
 8001d88:	4632      	mov	r2, r6
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f04f 0400 	mov.w	r4, #0
 8001d92:	0154      	lsls	r4, r2, #5
 8001d94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d98:	014b      	lsls	r3, r1, #5
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	1b49      	subs	r1, r1, r5
 8001da0:	eb62 0206 	sbc.w	r2, r2, r6
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	f04f 0400 	mov.w	r4, #0
 8001dac:	0194      	lsls	r4, r2, #6
 8001dae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	1a5b      	subs	r3, r3, r1
 8001db6:	eb64 0402 	sbc.w	r4, r4, r2
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	00e2      	lsls	r2, r4, #3
 8001dc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dc8:	00d9      	lsls	r1, r3, #3
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4614      	mov	r4, r2
 8001dce:	195b      	adds	r3, r3, r5
 8001dd0:	eb44 0406 	adc.w	r4, r4, r6
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	02a2      	lsls	r2, r4, #10
 8001dde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001de2:	0299      	lsls	r1, r3, #10
 8001de4:	460b      	mov	r3, r1
 8001de6:	4614      	mov	r4, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	4621      	mov	r1, r4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 0400 	mov.w	r4, #0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4623      	mov	r3, r4
 8001df6:	f7fe fa1f 	bl	8000238 <__aeabi_uldivmod>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	60bb      	str	r3, [r7, #8]
      break;
 8001e1a:	e002      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e1e:	60bb      	str	r3, [r7, #8]
      break;
 8001e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e22:	68bb      	ldr	r3, [r7, #8]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4601      	mov	r1, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08003580 	.word	0x08003580

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4601      	mov	r1, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08003580 	.word	0x08003580

08001ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ec8:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	4964      	ldr	r1, [pc, #400]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d017      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	4959      	ldr	r1, [pc, #356]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d017      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	494a      	ldr	r1, [pc, #296]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 808b 	beq.w	800209a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fe3a 	bl	8000c20 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fe36 	bl	8000c20 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e38d      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d035      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d02e      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d114      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe fdfe 	bl	8000c20 <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fdfa 	bl	8000c20 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e34f      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002056:	d111      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002066:	400b      	ands	r3, r1
 8002068:	4901      	ldr	r1, [pc, #4]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	0ffffcff 	.word	0x0ffffcff
 800207c:	4bb3      	ldr	r3, [pc, #716]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4ab2      	ldr	r2, [pc, #712]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002082:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002086:	6093      	str	r3, [r2, #8]
 8002088:	4bb0      	ldr	r3, [pc, #704]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	49ad      	ldr	r1, [pc, #692]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002096:	4313      	orrs	r3, r2
 8002098:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020a6:	4ba9      	ldr	r3, [pc, #676]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ac:	4aa7      	ldr	r2, [pc, #668]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020b6:	4ba5      	ldr	r3, [pc, #660]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	49a2      	ldr	r1, [pc, #648]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d4:	4b9d      	ldr	r3, [pc, #628]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e2:	499a      	ldr	r1, [pc, #616]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f6:	4b95      	ldr	r3, [pc, #596]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002104:	4991      	ldr	r1, [pc, #580]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002118:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002126:	4989      	ldr	r1, [pc, #548]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800213a:	4b84      	ldr	r3, [pc, #528]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4980      	ldr	r1, [pc, #512]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215c:	4b7b      	ldr	r3, [pc, #492]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4978      	ldr	r1, [pc, #480]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f023 020c 	bic.w	r2, r3, #12
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	496f      	ldr	r1, [pc, #444]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4967      	ldr	r1, [pc, #412]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c2:	4b62      	ldr	r3, [pc, #392]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	495e      	ldr	r1, [pc, #376]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	4956      	ldr	r1, [pc, #344]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002228:	4b48      	ldr	r3, [pc, #288]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	4945      	ldr	r1, [pc, #276]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	493c      	ldr	r1, [pc, #240]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227a:	4934      	ldr	r1, [pc, #208]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800229c:	492b      	ldr	r1, [pc, #172]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ac:	d101      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	491b      	ldr	r1, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00f      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	e002      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	4985      	ldr	r1, [pc, #532]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002364:	4b80      	ldr	r3, [pc, #512]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800236a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002374:	497c      	ldr	r1, [pc, #496]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800238a:	f040 80d6 	bne.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800238e:	4b76      	ldr	r3, [pc, #472]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a75      	ldr	r2, [pc, #468]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002394:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239a:	f7fe fc41 	bl	8000c20 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023a2:	f7fe fc3d 	bl	8000c20 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	; 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e194      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023b4:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11d      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023d4:	4b64      	ldr	r3, [pc, #400]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023e2:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e8:	0e1b      	lsrs	r3, r3, #24
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	019a      	lsls	r2, r3, #6
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	071b      	lsls	r3, r3, #28
 8002408:	4957      	ldr	r1, [pc, #348]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02e      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d129      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	0f1b      	lsrs	r3, r3, #28
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	019a      	lsls	r2, r3, #6
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	493d      	ldr	r1, [pc, #244]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247e:	f023 021f 	bic.w	r2, r3, #31
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	3b01      	subs	r3, #1
 8002488:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01d      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b0:	0f1b      	lsrs	r3, r3, #28
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	019a      	lsls	r2, r3, #6
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	071b      	lsls	r3, r3, #28
 80024d0:	4925      	ldr	r1, [pc, #148]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d011      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	019a      	lsls	r2, r3, #6
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	071b      	lsls	r3, r3, #28
 8002500:	4919      	ldr	r1, [pc, #100]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800250e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fb84 	bl	8000c20 <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800251c:	f7fe fb80 	bl	8000c20 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0d7      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b01      	cmp	r3, #1
 800253e:	f040 80cd 	bne.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254e:	f7fe fb67 	bl	8000c20 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002556:	f7fe fb63 	bl	8000c20 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d903      	bls.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0ba      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002568:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002578:	d0ed      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02e      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12a      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025b0:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	0f1b      	lsrs	r3, r3, #28
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	019a      	lsls	r2, r3, #6
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	4944      	ldr	r1, [pc, #272]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025de:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	493d      	ldr	r1, [pc, #244]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d022      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260c:	d11d      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	0e1b      	lsrs	r3, r3, #24
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800261c:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	0f1b      	lsrs	r3, r3, #28
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	019a      	lsls	r2, r3, #6
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	4929      	ldr	r1, [pc, #164]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d028      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	0e1b      	lsrs	r3, r3, #24
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	019a      	lsls	r2, r3, #6
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	431a      	orrs	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	071b      	lsls	r3, r3, #28
 800268a:	4917      	ldr	r1, [pc, #92]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	4911      	ldr	r1, [pc, #68]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fab4 	bl	8000c20 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026bc:	f7fe fab0 	bl	8000c20 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e007      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026da:	d1ef      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e040      	b.n	8002780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f92c 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f82c 	bl	8002788 <UART_SetConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e022      	b.n	8002780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 faca 	bl	8002cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fb51 	bl	8002e20 <UART_CheckIdleState>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4bb1      	ldr	r3, [pc, #708]	; (8002a7c <UART_SetConfig+0x2f4>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	6939      	ldr	r1, [r7, #16]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a9f      	ldr	r2, [pc, #636]	; (8002a80 <UART_SetConfig+0x2f8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d121      	bne.n	800284c <UART_SetConfig+0xc4>
 8002808:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <UART_SetConfig+0x2fc>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b03      	cmp	r3, #3
 8002814:	d816      	bhi.n	8002844 <UART_SetConfig+0xbc>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <UART_SetConfig+0x94>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002839 	.word	0x08002839
 8002824:	08002833 	.word	0x08002833
 8002828:	0800283f 	.word	0x0800283f
 800282c:	2301      	movs	r3, #1
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e151      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002832:	2302      	movs	r3, #2
 8002834:	77fb      	strb	r3, [r7, #31]
 8002836:	e14e      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002838:	2304      	movs	r3, #4
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e14b      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800283e:	2308      	movs	r3, #8
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e148      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002844:	2310      	movs	r3, #16
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	bf00      	nop
 800284a:	e144      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8d      	ldr	r2, [pc, #564]	; (8002a88 <UART_SetConfig+0x300>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d134      	bne.n	80028c0 <UART_SetConfig+0x138>
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <UART_SetConfig+0x2fc>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d829      	bhi.n	80028b8 <UART_SetConfig+0x130>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <UART_SetConfig+0xe4>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080028b9 	.word	0x080028b9
 8002874:	080028b9 	.word	0x080028b9
 8002878:	080028b9 	.word	0x080028b9
 800287c:	080028ad 	.word	0x080028ad
 8002880:	080028b9 	.word	0x080028b9
 8002884:	080028b9 	.word	0x080028b9
 8002888:	080028b9 	.word	0x080028b9
 800288c:	080028a7 	.word	0x080028a7
 8002890:	080028b9 	.word	0x080028b9
 8002894:	080028b9 	.word	0x080028b9
 8002898:	080028b9 	.word	0x080028b9
 800289c:	080028b3 	.word	0x080028b3
 80028a0:	2300      	movs	r3, #0
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e117      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	77fb      	strb	r3, [r7, #31]
 80028aa:	e114      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028ac:	2304      	movs	r3, #4
 80028ae:	77fb      	strb	r3, [r7, #31]
 80028b0:	e111      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028b2:	2308      	movs	r3, #8
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e10e      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028b8:	2310      	movs	r3, #16
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	bf00      	nop
 80028be:	e10a      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a71      	ldr	r2, [pc, #452]	; (8002a8c <UART_SetConfig+0x304>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d120      	bne.n	800290c <UART_SetConfig+0x184>
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <UART_SetConfig+0x2fc>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d00f      	beq.n	80028f8 <UART_SetConfig+0x170>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d802      	bhi.n	80028e2 <UART_SetConfig+0x15a>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <UART_SetConfig+0x164>
 80028e0:	e010      	b.n	8002904 <UART_SetConfig+0x17c>
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d005      	beq.n	80028f2 <UART_SetConfig+0x16a>
 80028e6:	2b30      	cmp	r3, #48	; 0x30
 80028e8:	d009      	beq.n	80028fe <UART_SetConfig+0x176>
 80028ea:	e00b      	b.n	8002904 <UART_SetConfig+0x17c>
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e0f1      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	77fb      	strb	r3, [r7, #31]
 80028f6:	e0ee      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028f8:	2304      	movs	r3, #4
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e0eb      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80028fe:	2308      	movs	r3, #8
 8002900:	77fb      	strb	r3, [r7, #31]
 8002902:	e0e8      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002904:	2310      	movs	r3, #16
 8002906:	77fb      	strb	r3, [r7, #31]
 8002908:	bf00      	nop
 800290a:	e0e4      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5f      	ldr	r2, [pc, #380]	; (8002a90 <UART_SetConfig+0x308>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d120      	bne.n	8002958 <UART_SetConfig+0x1d0>
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <UART_SetConfig+0x2fc>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d00f      	beq.n	8002944 <UART_SetConfig+0x1bc>
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d802      	bhi.n	800292e <UART_SetConfig+0x1a6>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <UART_SetConfig+0x1b0>
 800292c:	e010      	b.n	8002950 <UART_SetConfig+0x1c8>
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d005      	beq.n	800293e <UART_SetConfig+0x1b6>
 8002932:	2bc0      	cmp	r3, #192	; 0xc0
 8002934:	d009      	beq.n	800294a <UART_SetConfig+0x1c2>
 8002936:	e00b      	b.n	8002950 <UART_SetConfig+0x1c8>
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
 800293c:	e0cb      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800293e:	2302      	movs	r3, #2
 8002940:	77fb      	strb	r3, [r7, #31]
 8002942:	e0c8      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002944:	2304      	movs	r3, #4
 8002946:	77fb      	strb	r3, [r7, #31]
 8002948:	e0c5      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800294a:	2308      	movs	r3, #8
 800294c:	77fb      	strb	r3, [r7, #31]
 800294e:	e0c2      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002950:	2310      	movs	r3, #16
 8002952:	77fb      	strb	r3, [r7, #31]
 8002954:	bf00      	nop
 8002956:	e0be      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4d      	ldr	r2, [pc, #308]	; (8002a94 <UART_SetConfig+0x30c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d124      	bne.n	80029ac <UART_SetConfig+0x224>
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <UART_SetConfig+0x2fc>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002970:	d012      	beq.n	8002998 <UART_SetConfig+0x210>
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d802      	bhi.n	800297e <UART_SetConfig+0x1f6>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <UART_SetConfig+0x204>
 800297c:	e012      	b.n	80029a4 <UART_SetConfig+0x21c>
 800297e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002982:	d006      	beq.n	8002992 <UART_SetConfig+0x20a>
 8002984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002988:	d009      	beq.n	800299e <UART_SetConfig+0x216>
 800298a:	e00b      	b.n	80029a4 <UART_SetConfig+0x21c>
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	e0a1      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002992:	2302      	movs	r3, #2
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	e09e      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002998:	2304      	movs	r3, #4
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e09b      	b.n	8002ad6 <UART_SetConfig+0x34e>
 800299e:	2308      	movs	r3, #8
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e098      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029a4:	2310      	movs	r3, #16
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	bf00      	nop
 80029aa:	e094      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <UART_SetConfig+0x310>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d124      	bne.n	8002a00 <UART_SetConfig+0x278>
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <UART_SetConfig+0x2fc>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d012      	beq.n	80029ec <UART_SetConfig+0x264>
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d802      	bhi.n	80029d2 <UART_SetConfig+0x24a>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <UART_SetConfig+0x258>
 80029d0:	e012      	b.n	80029f8 <UART_SetConfig+0x270>
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d6:	d006      	beq.n	80029e6 <UART_SetConfig+0x25e>
 80029d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029dc:	d009      	beq.n	80029f2 <UART_SetConfig+0x26a>
 80029de:	e00b      	b.n	80029f8 <UART_SetConfig+0x270>
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e077      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e074      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029ec:	2304      	movs	r3, #4
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e071      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029f2:	2308      	movs	r3, #8
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e06e      	b.n	8002ad6 <UART_SetConfig+0x34e>
 80029f8:	2310      	movs	r3, #16
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	bf00      	nop
 80029fe:	e06a      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <UART_SetConfig+0x314>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d124      	bne.n	8002a54 <UART_SetConfig+0x2cc>
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <UART_SetConfig+0x2fc>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a18:	d012      	beq.n	8002a40 <UART_SetConfig+0x2b8>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	d802      	bhi.n	8002a26 <UART_SetConfig+0x29e>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <UART_SetConfig+0x2ac>
 8002a24:	e012      	b.n	8002a4c <UART_SetConfig+0x2c4>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	d006      	beq.n	8002a3a <UART_SetConfig+0x2b2>
 8002a2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a30:	d009      	beq.n	8002a46 <UART_SetConfig+0x2be>
 8002a32:	e00b      	b.n	8002a4c <UART_SetConfig+0x2c4>
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e04d      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e04a      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a40:	2304      	movs	r3, #4
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e047      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a46:	2308      	movs	r3, #8
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e044      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	bf00      	nop
 8002a52:	e040      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <UART_SetConfig+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d139      	bne.n	8002ad2 <UART_SetConfig+0x34a>
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <UART_SetConfig+0x2fc>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6c:	d027      	beq.n	8002abe <UART_SetConfig+0x336>
 8002a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a72:	d817      	bhi.n	8002aa4 <UART_SetConfig+0x31c>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <UART_SetConfig+0x32a>
 8002a78:	e027      	b.n	8002aca <UART_SetConfig+0x342>
 8002a7a:	bf00      	nop
 8002a7c:	efff69f3 	.word	0xefff69f3
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40004400 	.word	0x40004400
 8002a8c:	40004800 	.word	0x40004800
 8002a90:	40004c00 	.word	0x40004c00
 8002a94:	40005000 	.word	0x40005000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	40007800 	.word	0x40007800
 8002aa0:	40007c00 	.word	0x40007c00
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d006      	beq.n	8002ab8 <UART_SetConfig+0x330>
 8002aaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002aae:	d009      	beq.n	8002ac4 <UART_SetConfig+0x33c>
 8002ab0:	e00b      	b.n	8002aca <UART_SetConfig+0x342>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e00e      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e00b      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e008      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	e005      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002aca:	2310      	movs	r3, #16
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	bf00      	nop
 8002ad0:	e001      	b.n	8002ad6 <UART_SetConfig+0x34e>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ade:	d17f      	bne.n	8002be0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d85c      	bhi.n	8002ba0 <UART_SetConfig+0x418>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <UART_SetConfig+0x364>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002b11 	.word	0x08002b11
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b51 	.word	0x08002b51
 8002af8:	08002ba1 	.word	0x08002ba1
 8002afc:	08002b69 	.word	0x08002b69
 8002b00:	08002ba1 	.word	0x08002ba1
 8002b04:	08002ba1 	.word	0x08002ba1
 8002b08:	08002ba1 	.word	0x08002ba1
 8002b0c:	08002b89 	.word	0x08002b89
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b10:	f7ff f99e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002b14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	005a      	lsls	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	441a      	add	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	61bb      	str	r3, [r7, #24]
        break;
 8002b2e:	e03a      	b.n	8002ba6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff f9a2 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002b34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	005a      	lsls	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	61bb      	str	r3, [r7, #24]
        break;
 8002b4e:	e02a      	b.n	8002ba6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	085a      	lsrs	r2, r3, #1
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <UART_SetConfig+0x54c>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6852      	ldr	r2, [r2, #4]
 8002b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	61bb      	str	r3, [r7, #24]
        break;
 8002b66:	e01e      	b.n	8002ba6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b68:	f7ff f88e 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002b6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	005a      	lsls	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	61bb      	str	r3, [r7, #24]
        break;
 8002b86:	e00e      	b.n	8002ba6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	61bb      	str	r3, [r7, #24]
        break;
 8002b9e:	e002      	b.n	8002ba6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d916      	bls.n	8002bda <UART_SetConfig+0x452>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d212      	bcs.n	8002bda <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f023 030f 	bic.w	r3, r3, #15
 8002bbc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	897a      	ldrh	r2, [r7, #10]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	e070      	b.n	8002cbc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
 8002bde:	e06d      	b.n	8002cbc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d859      	bhi.n	8002c9a <UART_SetConfig+0x512>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <UART_SetConfig+0x464>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c2f 	.word	0x08002c2f
 8002bf4:	08002c4d 	.word	0x08002c4d
 8002bf8:	08002c9b 	.word	0x08002c9b
 8002bfc:	08002c65 	.word	0x08002c65
 8002c00:	08002c9b 	.word	0x08002c9b
 8002c04:	08002c9b 	.word	0x08002c9b
 8002c08:	08002c9b 	.word	0x08002c9b
 8002c0c:	08002c83 	.word	0x08002c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff f91e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	085a      	lsrs	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	441a      	add	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	61bb      	str	r3, [r7, #24]
        break;
 8002c2c:	e038      	b.n	8002ca0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2e:	f7ff f923 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002c32:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085a      	lsrs	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	61bb      	str	r3, [r7, #24]
        break;
 8002c4a:	e029      	b.n	8002ca0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	085a      	lsrs	r2, r3, #1
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <UART_SetConfig+0x550>)
 8002c54:	4413      	add	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6852      	ldr	r2, [r2, #4]
 8002c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	61bb      	str	r3, [r7, #24]
        break;
 8002c62:	e01d      	b.n	8002ca0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c64:	f7ff f810 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8002c68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	085a      	lsrs	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	61bb      	str	r3, [r7, #24]
        break;
 8002c80:	e00e      	b.n	8002ca0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	61bb      	str	r3, [r7, #24]
        break;
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d908      	bls.n	8002cb8 <UART_SetConfig+0x530>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d204      	bcs.n	8002cb8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e001      	b.n	8002cbc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	01e84800 	.word	0x01e84800
 8002cd8:	00f42400 	.word	0x00f42400

08002cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01a      	beq.n	8002df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dda:	d10a      	bne.n	8002df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e2e:	f7fd fef7 	bl	8000c20 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d10e      	bne.n	8002e60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f82a 	bl	8002eaa <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e020      	b.n	8002ea2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d10e      	bne.n	8002e8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f814 	bl	8002eaa <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e00a      	b.n	8002ea2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eba:	e05d      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	d059      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7fd feac 	bl	8000c20 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11b      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ee8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e042      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02b      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2e:	d123      	bne.n	8002f78 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f38:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f48:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e00f      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d092      	beq.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	f107 001c 	add.w	r0, r7, #28
 8002fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d120      	bne.n	8002ffa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <USB_CoreInit+0xac>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d105      	bne.n	8002fee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa52 	bl	8003498 <USB_CoreReset>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e010      	b.n	800301c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa46 	bl	8003498 <USB_CoreReset>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10b      	bne.n	800303a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f043 0206 	orr.w	r2, r3, #6
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003046:	b004      	add	sp, #16
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	ffbdffbf 	.word	0xffbdffbf

08003050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 0201 	bic.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d106      	bne.n	800309e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	e00b      	b.n	80030b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e001      	b.n	80030b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e003      	b.n	80030be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80030b6:	2032      	movs	r0, #50	; 0x32
 80030b8:	f7fd fdbe 	bl	8000c38 <HAL_Delay>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030c8:	b084      	sub	sp, #16
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e009      	b.n	80030fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	3340      	adds	r3, #64	; 0x40
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3301      	adds	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b0e      	cmp	r3, #14
 8003100:	d9f2      	bls.n	80030e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11c      	bne.n	8003142 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e005      	b.n	800314e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003154:	461a      	mov	r2, r3
 8003156:	2300      	movs	r3, #0
 8003158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003160:	4619      	mov	r1, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003168:	461a      	mov	r2, r3
 800316a:	680b      	ldr	r3, [r1, #0]
 800316c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10c      	bne.n	800318e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800317a:	2100      	movs	r1, #0
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f959 	bl	8003434 <USB_SetDevSpeed>
 8003182:	e018      	b.n	80031b6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003184:	2101      	movs	r1, #1
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f954 	bl	8003434 <USB_SetDevSpeed>
 800318c:	e013      	b.n	80031b6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10c      	bne.n	80031ae <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800319a:	2100      	movs	r1, #0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f949 	bl	8003434 <USB_SetDevSpeed>
 80031a2:	e008      	b.n	80031b6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031a4:	2101      	movs	r1, #1
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f944 	bl	8003434 <USB_SetDevSpeed>
 80031ac:	e003      	b.n	80031b6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031ae:	2103      	movs	r1, #3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f93f 	bl	8003434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031b6:	2110      	movs	r1, #16
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8f3 	bl	80033a4 <USB_FlushTxFifo>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f911 	bl	80033f0 <USB_FlushRxFifo>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	461a      	mov	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ea:	461a      	mov	r2, r3
 80031ec:	2300      	movs	r3, #0
 80031ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	461a      	mov	r2, r3
 80031f8:	2300      	movs	r3, #0
 80031fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e043      	b.n	800328a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003218:	d118      	bne.n	800324c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	461a      	mov	r2, r3
 800322e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e013      	b.n	800325e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e008      	b.n	800325e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327c:	461a      	mov	r2, r3
 800327e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3301      	adds	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d3b7      	bcc.n	8003202 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	e043      	b.n	8003320 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ae:	d118      	bne.n	80032e2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e013      	b.n	80032f4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e008      	b.n	80032f4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	2300      	movs	r3, #0
 8003304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d3b7      	bcc.n	8003298 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800333a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <USB_DevInit+0x2d4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f043 0208 	orr.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <USB_DevInit+0x2d8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800338c:	7dfb      	ldrb	r3, [r7, #23]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003398:	b004      	add	sp, #16
 800339a:	4770      	bx	lr
 800339c:	803c3800 	.word	0x803c3800
 80033a0:	40000004 	.word	0x40000004

080033a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <USB_FlushTxFifo+0x48>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e006      	b.n	80033de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d0f0      	beq.n	80033be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	00030d40 	.word	0x00030d40

080033f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2210      	movs	r2, #16
 8003400:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <USB_FlushRxFifo+0x40>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e006      	b.n	8003422 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b10      	cmp	r3, #16
 800341e:	d0f0      	beq.n	8003402 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	00030d40 	.word	0x00030d40

08003434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003486:	2003      	movs	r0, #3
 8003488:	f7fd fbd6 	bl	8000c38 <HAL_Delay>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <USB_CoreReset+0x64>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e01b      	b.n	80034ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	daf2      	bge.n	80034a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <USB_CoreReset+0x64>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d0f0      	beq.n	80034ce <USB_CoreReset+0x36>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	00030d40 	.word	0x00030d40

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	4e0d      	ldr	r6, [pc, #52]	; (8003538 <__libc_init_array+0x38>)
 8003504:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003506:	1ba4      	subs	r4, r4, r6
 8003508:	10a4      	asrs	r4, r4, #2
 800350a:	2500      	movs	r5, #0
 800350c:	42a5      	cmp	r5, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	4e0b      	ldr	r6, [pc, #44]	; (8003540 <__libc_init_array+0x40>)
 8003512:	4c0c      	ldr	r4, [pc, #48]	; (8003544 <__libc_init_array+0x44>)
 8003514:	f000 f820 	bl	8003558 <_init>
 8003518:	1ba4      	subs	r4, r4, r6
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	2500      	movs	r5, #0
 800351e:	42a5      	cmp	r5, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003528:	4798      	blx	r3
 800352a:	3501      	adds	r5, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003532:	4798      	blx	r3
 8003534:	3501      	adds	r5, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	08003590 	.word	0x08003590
 800353c:	08003590 	.word	0x08003590
 8003540:	08003590 	.word	0x08003590
 8003544:	08003594 	.word	0x08003594

08003548 <memset>:
 8003548:	4402      	add	r2, r0
 800354a:	4603      	mov	r3, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <_init>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr

08003564 <_fini>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr
